package net.seesharpsoft.melon.jdbc;

import net.seesharpsoft.commons.collection.Properties;
import net.seesharpsoft.melon.Melonade;
import net.seesharpsoft.melon.MelonadeFactory;
import org.h2.engine.Constants;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.sql.Statement;

public class MelonConnection extends org.h2.jdbc.JdbcConnection {
    
    private static String getH2Url(Melonade melonade) {
        return String.format("%smem:%s", Constants.START_URL, melonade.getId());
    }
    
    private static java.util.Properties applyDefaultConnectionSettings(Properties properties) {
        properties.put("AUTOCOMMIT", "false");
        return properties.legacy();
    }
    
    protected Melonade melonade;
    
    public MelonConnection(Melonade melonade) throws SQLException {
        super(getH2Url(melonade), applyDefaultConnectionSettings(melonade.getProperties()));

        this.melonade = melonade;
        this.melonade.syncToDatabase(this);
    }
    
    @Override
    public synchronized void close() throws SQLException {
        super.close();

        MelonadeFactory.INSTANCE.remove(melonade);
    }
    
    @Override
    public synchronized void commit() throws SQLException {
        super.commit();

        this.melonade.syncToStorage(this);
    }

    @Override
    public synchronized void rollback() throws SQLException {
        super.rollback();

        this.melonade.syncToDatabase(this);
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        super.rollback(savepoint);

        this.melonade.syncToDatabase(this);
    }

    @Override
    public Statement createStatement() throws SQLException {
        return new MelonPreparedStatement(melonade, super.createStatement());
    }

    @Override
    public Statement createStatement(int resultSetType,
                                     int resultSetConcurrency) throws SQLException {
        return new MelonPreparedStatement(melonade, super.createStatement(resultSetType, resultSetConcurrency));
    }

    @Override
    public Statement createStatement(int resultSetType,
                                     int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        return new MelonPreparedStatement(melonade, super.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new MelonPreparedStatement(melonade, super.prepareStatement(sql));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
                                              int resultSetConcurrency) throws SQLException {
        return new MelonPreparedStatement(melonade, super.prepareStatement(sql, resultSetType, resultSetConcurrency));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
                                              int resultSetConcurrency, int resultSetHoldability)
            throws SQLException {
        return new MelonPreparedStatement(melonade, super.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        return new MelonPreparedStatement(melonade, super.prepareStatement(sql, autoGeneratedKeys));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return new MelonPreparedStatement(melonade, super.prepareStatement(sql, columnIndexes));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        return new MelonPreparedStatement(melonade, super.prepareStatement(sql, columnNames));
    }
}
