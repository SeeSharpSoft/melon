buildscript {
    repositories {
        jcenter()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = '0.8.2'
    }

    shadowJar {
        classifier = 'DEV'
    }

    group 'net.seesharpsoft.melon'
    version = '0.11.0'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    sourceCompatibility = 1.8

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile 'com.h2database:h2:1.4.197'
        compileOnly 'org.projectlombok:lombok:1.18.2'
    }

    test {
        jacoco {
            enabled = true
        }
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }

    jacocoTestReport {
        additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    tasks.jacocoTestReport {
        dependsOn check
    }
}

dependencies {
    testCompile project(path: ':melon-core', configuration: 'testFixtures')
    compile project(':melon-core')
    compile project(':melon-csv')
    compile project(':melon-html')
    compile project(':melon-xls')
}

// coveralls does not support multi-module, therefore merging reports
task jacocoRootReport(type: JacocoReport) {
    dependsOn = [allprojects.jacocoTestReport]
    additionalSourceDirs = files(allprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(allprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(allprojects.sourceSets.main.output)
    executionData = files(allprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

coveralls {
    sourceDirs = files(allprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
}

tasks.coveralls {
    dependsOn jacocoRootReport
}
